-----------------------------------------------------------------------------
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2, or (at your option)
-- any later version.
-- 
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-----------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.txt_util.all;

entity t_multipliers is
end entity t_multipliers;

architecture t_multipliers_1 of t_multipliers is

  signal endofsimulation_s : boolean := false;

  constant fpga_period_c : time := 20 ns; -- FPGA period

	<<<CONSTANTS>>>

  signal clk_s   : std_logic;
  signal reset_ns : std_logic;

  component multiplier93 is
    generic (
      clk_freq_c : natural := 50000;
			int_size_c : natural := int_size_c;
			frac_size_c : natural := frac_size_c
    );
    port (
      clk_i   : in  std_logic;
      reset_ni : in  std_logic;

			valid_i : in std_logic;
			element_value_i : in signed(int_size_c-1 downto 0);

			compute_i : in std_logic;
			done_o : out std_logic;

			input0_i, input1_i, input2_i, input3_i, input4_i, input5_i, input6_i, input7_i, input8_i : in signed(int_size_c-1 downto 0);
			output0_o, output1_o, output2_o : out signed(int_size_c-1 downto 0)
    );
  end component multiplier93;
  for multiplier93_0 : multiplier93 use entity work.multiplier93;


  component multiplier63 is
    generic (
      clk_freq_c : natural := 50000;
			int_size_c : natural := int_size_c;
			frac_size_c : natural := frac_size_c
    );
    port (
      clk_i   : in  std_logic;
      reset_ni : in  std_logic;

			valid_i : in std_logic;
			element_value_i : in signed(int_size_c-1 downto 0);

			compute_i : in std_logic;
			done_o : out std_logic;

			input0_i, input1_i, input2_i, input3_i, input4_i, input5_i : in signed(int_size_c-1 downto 0);
			output0_o, output1_o, output2_o : out signed(int_size_c-1 downto 0)
    );
  end component multiplier63;
  for multiplier63_0 : multiplier63 use entity work.multiplier63;


  component multiplier33 is
    generic (
      clk_freq_c : natural := 50000;
			int_size_c : natural := int_size_c;
			frac_size_c : natural := frac_size_c
    );
    port (
      clk_i   : in  std_logic;
      reset_ni : in  std_logic;

			valid_i : in std_logic;
			element_value_i : in signed(int_size_c-1 downto 0);

			compute_i : in std_logic;
			done_o : out std_logic;

			input0_i, input1_i, input2_i : in signed(int_size_c-1 downto 0);
			output0_o, output1_o, output2_o : out signed(int_size_c-1 downto 0)
    );
  end component multiplier33;
  for multiplier33_0 : multiplier33 use entity work.multiplier33;

  type input_vectorA_t is array(0 to 8) of signed(int_size_c-1 downto 0);
  signal inputA_s : input_vectorA_t;
  type input_vectorB_t is array(0 to 5) of signed(int_size_c-1 downto 0);
  signal inputB_s : input_vectorB_t;
  type input_vectorC_t is array(0 to 8) of signed(int_size_c-1 downto 0);
  signal inputC_s : input_vectorC_t;

  type output_vector_t is array(0 to 2) of signed(int_size_c-1 downto 0);
  signal outputA_s : output_vector_t;
  signal outputB_s : output_vector_t;
  signal outputC_s : output_vector_t;

	signal computeA_s, doneA_s, validA_s : std_logic;
	signal computeB_s, doneB_s, validB_s : std_logic;
	signal computeC_s, doneC_s, validC_s : std_logic;
	signal element_value_s : signed(int_size_c-1 downto 0);

  signal debug_s : natural;

begin

  multiplier93_0 : multiplier93
  generic map (
    clk_freq_c => 1 ms / fpga_period_c
  )
  port map (
    clk_i   => clk_s,
    reset_ni => reset_ns,
		valid_i => validC_s,
		element_value_i => element_value_s,
		compute_i => computeC_s,
		done_o => doneC_s,
		input0_i => inputC_s(0),
		input1_i => inputC_s(1),
		input2_i => inputC_s(2),
		input3_i => inputC_s(3),
		input4_i => inputC_s(4),
		input5_i => inputC_s(5),
		input6_i => inputC_s(6),
		input7_i => inputC_s(7),
		input8_i => inputC_s(8),
		output0_o => outputC_s(0),
		output1_o => outputC_s(1),
		output2_o => outputC_s(2)
  );

  multiplier63_0 : multiplier63
  generic map (
    clk_freq_c => 1 ms / fpga_period_c
  )
  port map (
    clk_i   => clk_s,
    reset_ni => reset_ns,
		valid_i => validB_s,
		element_value_i => element_value_s,
		compute_i => computeB_s,
		done_o => doneB_s,
		input0_i => inputB_s(0),
		input1_i => inputB_s(1),
		input2_i => inputB_s(2),
		input3_i => inputB_s(3),
		input4_i => inputB_s(4),
		input5_i => inputB_s(5),
		output0_o => outputB_s(0),
		output1_o => outputB_s(1),
		output2_o => outputB_s(2)
  );
  
  multiplier33_0 : multiplier33
  generic map (
    clk_freq_c => 1 ms / fpga_period_c
  )
  port map (
    clk_i   => clk_s,
    reset_ni => reset_ns,
		valid_i => validA_s,
		element_value_i => element_value_s,
		compute_i => computeA_s,
		done_o => doneA_s,
		input0_i => inputA_s(0),
		input1_i => inputA_s(1),
		input2_i => inputA_s(2),
		output0_o => outputA_s(0),
		output1_o => outputA_s(1),
		output2_o => outputA_s(2)
  );

  stimuli_p : process
    variable tmp_v : integer;
  begin
    debug_s <= 0;
    reset_ns <= '0';
    wait for 100 ns;
    reset_ns <= '1';
		wait for 100 ns;

		<<<HERE>>>

		wait for 20 ns;
    report "end of tests" severity note;
    endofsimulation_s <= true;
    wait;

  end process stimuli_p;

  clock_p : process
  begin
    if endofsimulation_s = true then
      wait;
    end if;

    clk_s <= '1';
    wait for fpga_period_c/2;
    clk_s <= '0';
    wait for fpga_period_c/2;
  end process clock_p;

end architecture t_multipliers_1;


