#!/usr/bin/env python

import re, time

header_format = """/** @file
 * Generated by srom2header.py, %(date)s
 */
#ifndef %(name_up)s_H_
#define %(name_up)s_H_

#include <stdint.h>
#include <avr/pgmspace.h>

#define %(name_up)s_CRCHI (0xBE)
#define %(name_up)s_CRCLO (0xEF)

#define %(name_up)s_ID (0x56)

#define ADNS6010_FIRMWARE_CRC (0x%(crc)02x)

PROGMEM uint8_t %(name)sArray[%(data_len)d] = {
%(data_array)s
};

#endif
"""


def read_srom_txt(f):
  """Get a list of bytes from a srom file.
  Expected format: 1 hexadecimal value per line.
  """
  return [ int(l.strip(), 16) for l in f ]

def read_srom_inc(f):
  """Get a list of bytes from a srom file.
  Expected format: lists of values, several 
    sromTable1:
            db     0ebh,0ffh,045h,...
            db     03bh,085h,039h,...
    sromTable2:
      ...
  """
  data = []
  for l in f:
    l = l.strip()
    if not l.startswith('db '):
      continue  # ignore section labels
    data.extend( int(s, 16) for s in re.findall(r'0(\w\w)h', l) )
  return data

def data_crc(data):
  """Compute the CRC of a list of bytes."""
  return reduce(int.__xor__, data, 0)

def write_header(f, data, name):
  """Generate a C header file from a list of bytes.
  name is the name used for the declared elements.
  """

  data_s = ', '.join("0x%02x" % x for x in data)
  data_lines = '\n'.join("  %s"%s for s in re.findall(r'(.{1,78})(?: |$)', data_s))

  fmt_fields = {
      'name': name,
      'name_up': name.upper(),
      'crc': data_crc(data),
      'data_len': len(data),
      'data_array': data_lines,
      'date': time.strftime('%Y-%m-%d %H:%M:%S'),
      }
  f.write( header_format % fmt_fields )


def srom2header(fin, fout, reader, name):
  """Convert a srom file to a C header."""
  write_header(fout, reader(fin), name)


def main():
  from optparse import OptionParser
  import sys

  parser = OptionParser(
      description="Convert ADNS srom files to C headers.",
      usage="%prog [OPTIONS] [SROM_FILE] [HEADER_FILE]"
      )
  parser.add_option('-r', '--reader', dest='reader', metavar='EXT',
      help="reader to use ('inc' or 'txt')")
  parser.add_option('-n', '--name', dest='name', metavar='NAME',
      help="name for defined elements")
  (opts, args) = parser.parse_args()

  if len(args) > 2:
    parser.error("invalid argument count")
  if len(args) >= 2:
    fname = args[1]
    if opts.name is None:
      # try to guess a default name
      try:
        opts.name = fname.split('.',2)[0]
      except Exception:
        pass
    fout = open(fname, 'wb')
  else:
    fout = sys.stdout
  if len(args) >= 1:
    fname = args[0]
    if opts.reader is None:
      opts.reader = fname[-3:]
    fin = open(fname, 'rb')
  else:
    fin = sys.stdin

  if opts.reader is None:
    parser.error("reader not set")
  reader = {
      'txt': read_srom_txt,
      'inc': read_srom_inc,
      }[opts.reader]

  if opts.name is None:
    parser.error("name not set")

  srom2header(fin, fout, reader, opts.name)


if __name__ == '__main__':
  main()

